import { Project, FileNode, DirectoryNode } from '../filesystem/types'
import { generateId } from '../utils/id'

export function createSampleProject(): Project {
  const now = new Date()
  
  // Create root directory
  const rootId = generateId()
  const root: DirectoryNode = {
    id: rootId,
    name: 'sample-next-app',
    path: '/',
    parentId: null,
    type: 'directory',
    children: [],
    createdAt: now,
    updatedAt: now
  }

  // Create app directory
  const appDirId = generateId()
  const appDir: DirectoryNode = {
    id: appDirId,
    name: 'app',
    path: '/app',
    parentId: rootId,
    type: 'directory',
    children: [],
    createdAt: now,
    updatedAt: now
  }

  // Create components directory
  const componentsDirId = generateId()
  const componentsDir: DirectoryNode = {
    id: componentsDirId,
    name: 'components',
    path: '/components',
    parentId: rootId,
    type: 'directory',
    children: [],
    createdAt: now,
    updatedAt: now
  }

  // Create package.json
  const packageJsonId = generateId()
  const packageJson: FileNode = {
    id: packageJsonId,
    name: 'package.json',
    path: '/package.json',
    parentId: rootId,
    type: 'file',
    content: `{
  "name": "sample-next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "typescript": "^5"
  }
}`,
    size: 0,
    mimeType: 'application/json',
    createdAt: now,
    updatedAt: now
  }

  // Create app/page.tsx
  const pageId = generateId()
  const pageFile: FileNode = {
    id: pageId,
    name: 'page.tsx',
    path: '/app/page.tsx',
    parentId: appDirId,
    type: 'file',
    content: `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">app/page.tsx</code>
        </p>
      </div>

      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-full sm:before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full sm:after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
        <h1 className="text-6xl font-bold">
          Welcome to Next.js!
        </h1>
      </div>

      <div className="mb-32 grid text-center lg:mb-0 lg:w-full lg:max-w-5xl lg:grid-cols-4 lg:text-left">
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className="mb-3 text-2xl font-semibold">
            Docs{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Find in-depth information about Next.js features and API.
          </p>
        </a>
      </div>
    </main>
  )
}`,
    size: 0,
    mimeType: 'text/typescript',
    createdAt: now,
    updatedAt: now
  }

  // Create app/layout.tsx
  const layoutId = generateId()
  const layoutFile: FileNode = {
    id: layoutId,
    name: 'layout.tsx',
    path: '/app/layout.tsx',
    parentId: appDirId,
    type: 'file',
    content: `import type { Metadata } from 'next'
import './globals.css'

export const metadata: Metadata = {
  title: 'Sample Next.js App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}`,
    size: 0,
    mimeType: 'text/typescript',
    createdAt: now,
    updatedAt: now
  }

  // Create app/globals.css
  const globalsCssId = generateId()
  const globalsCss: FileNode = {
    id: globalsCssId,
    name: 'globals.css',
    path: '/app/globals.css',
    parentId: appDirId,
    type: 'file',
    content: `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`,
    size: 0,
    mimeType: 'text/css',
    createdAt: now,
    updatedAt: now
  }

  // Create components/Button.tsx
  const buttonId = generateId()
  const buttonFile: FileNode = {
    id: buttonId,
    name: 'Button.tsx',
    path: '/components/Button.tsx',
    parentId: componentsDirId,
    type: 'file',
    content: `import React from 'react'

interface ButtonProps {
  children: React.ReactNode
  onClick?: () => void
  variant?: 'primary' | 'secondary' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  className?: string
}

export function Button({ 
  children, 
  onClick, 
  variant = 'primary', 
  size = 'md',
  disabled = false,
  className = ''
}: ButtonProps) {
  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'
  
  const variantClasses = {
    primary: 'bg-primary text-primary-foreground hover:bg-primary/90',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    ghost: 'hover:bg-accent hover:text-accent-foreground'
  }
  
  const sizeClasses = {
    sm: 'h-9 px-3 text-sm',
    md: 'h-10 px-4 py-2',
    lg: 'h-11 px-8'
  }

  const classes = \`\${baseClasses} \${variantClasses[variant]} \${sizeClasses[size]} \${className}\`

  return (
    <button 
      className={classes}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  )
}`,
    size: 0,
    mimeType: 'text/typescript',
    createdAt: now,
    updatedAt: now
  }

  // Create README.md
  const readmeId = generateId()
  const readmeFile: FileNode = {
    id: readmeId,
    name: 'README.md',
    path: '/README.md',
    parentId: rootId,
    type: 'file',
    content: `# Sample Next.js App

This is a sample Next.js application created to demonstrate the website generator.

## Getting Started

First, run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying \`app/page.tsx\`. The page auto-updates as you edit the file.

## Features

- ‚ö° Next.js 15.4.6
- ‚öõÔ∏è React 19.1.0
- üé® Tailwind CSS
- üìù TypeScript
- üß© Reusable Components

## Project Structure

\`\`\`
/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx      # Root layout
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx        # Home page
‚îÇ   ‚îî‚îÄ‚îÄ globals.css     # Global styles
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ Button.tsx      # Button component
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
\`\`\`

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
`,
    size: 0,
    mimeType: 'text/markdown',
    createdAt: now,
    updatedAt: now
  }

  // Update directory children arrays
  root.children = [appDirId, componentsDirId, packageJsonId, readmeId]
  appDir.children = [pageId, layoutId, globalsCssId]
  componentsDir.children = [buttonId]

  // Calculate file sizes
  packageJson.size = packageJson.content.length
  pageFile.size = pageFile.content.length
  layoutFile.size = layoutFile.content.length
  globalsCss.size = globalsCss.content.length
  buttonFile.size = buttonFile.content.length
  readmeFile.size = readmeFile.content.length

  // Create nodes map
  const nodes = new Map<string, FileNode | DirectoryNode>([
    [rootId, root],
    [appDirId, appDir],
    [componentsDirId, componentsDir],
    [packageJsonId, packageJson],
    [pageId, pageFile],
    [layoutId, layoutFile],
    [globalsCssId, globalsCss],
    [buttonId, buttonFile],
    [readmeId, readmeFile]
  ])

  return {
    id: generateId(),
    name: 'Sample Next.js App',
    description: 'A sample Next.js application with TypeScript and Tailwind CSS',
    rootId,
    nodes,
    createdAt: now,
    updatedAt: now,
    lastOpenedAt: now
  }
}